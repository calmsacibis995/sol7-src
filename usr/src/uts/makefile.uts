#
# uts/Makefile.uts
#
#ident	"@(#)Makefile.uts	1.51	98/01/07 SMI"
#
# Copyright (c) 1993 by Sun Microsystems, Inc.
#
#	This Makefiles contains the common targets and definitions for
#	all kernels. It is to be included in the Makefiles for specific
#	implementation architectures and processor architecture dependent
#	modules: i.e.: all driving kernel Makefiles.
#
#	Include global definitions:
#
include $(SRC)/Makefile.master

#
#	No text domain in the kernel.
#
DTEXTDOM =

#
#	Setup build-specific vars
#	To add a build type:
#		add name to ALL_BUILDS32 & ALL_BUILDS64
#		set CLASS_name and OBJ_DIR_name
#		add targets to Makefile.targ
#

#
#	DEF_BUILDS is for def, lint and install
#	ALL_BUILDS is for everything else (all, clean, ...)
#
# The NOT_RELEASE_BUILD noise is to maintain compatibility with the
# gatekeeper's nightly build script.
#
DEF_BUILDS32				= obj32
DEF_BUILDS64				= obj32 obj64
$(NOT_RELEASE_BUILD)DEF_BUILDS32	= debug32
$(NOT_RELEASE_BUILD)DEF_BUILDS64	= debug32 debug64
ALL_BUILDS32				= obj32 debug32
ALL_BUILDS64				= obj32 obj64 debug32 debug64

#
#	For modules int 64b dirs that aren't built 64b
#	create empty modlintlib files so global lint works
#
LINT64_BUILDS	= debug64

#
#	Build class (32b or 64b)
#
CLASS_OBJ32	= 32
CLASS_DBG32	= 32
CLASS_OBJ64	= 64
CLASS_DBG64	= 64
CLASS		= $(CLASS_$(BUILD_TYPE))

#
#	Build subdirectory
#
OBJS_DIR_OBJ32	= obj32
OBJS_DIR_DBG32	= debug32
OBJS_DIR_OBJ64	= obj64
OBJS_DIR_DBG64	= debug64
OBJS_DIR	= $(OBJS_DIR_$(BUILD_TYPE))

#
#	Create defaults so empty rules don't
#	confuse make
#
CLASS_		= 32
OBJS_DIR_	= debug32

#
#	Build tools
#
CC_sparc_32	= $(SPRO_ROOT)/SC4.2/bin/cc
CC_sparc_64	= $(SPRO_ROOT)/SC5.x/bin/cc

CC_i386_32	= $(SPRO_ROOT)/SC4.2/bin/cc

CC		= $(CC_$(MACH)_$(CLASS))

WYOMING_TOOLS	= $(BUILD_TOOLS)/misc/bin

LD_sparc_32	= ld
LD_sparc_64	= $(WYOMING_TOOLS)/ld

LD_i386_32	= ld

LD		= $(LD_$(MACH)_$(CLASS))

MCS_sparc_32	= mcs
MCS_sparc_64	= $(WYOMING_TOOLS)/mcs

MCS_i386_32	= mcs

MCS		= $(MCS_$(MACH)_$(CLASS))

CCMODE		= -Xt

MODEL_32	= ilp32
MODEL_64	= lp64
MODEL		= $(MODEL_$(CLASS))

#
#	Build rules for linting the kernel.
#
LHEAD =	( $(ECHO) "\n$@";

LGREP.2 =	grep -v ' _init ' | \
		grep -v ' _fini ' | \
		grep -v ' _info ' | \
		grep -v ' _depends_on '

LTAIL =	)

LINT.c =	$(LINT) -c -dirout=$(LINTS_DIR) $(LINTFLAGS) $(LINT_DEFS) $(CPPFLAGS)
LINT.s =	$(LINT.c)

LINTTAGS_32	= -erroff=E_BAD_PTR_CAST_ALIGN
LINTTAGS_64	= $(LINTTAGS_32)

# Selectively disable certain noisy lint errors
LENIENT_LINTTAGS = -erroff=E_CAST_INT_TO_SMALL_INT
LENIENT_LINTTAGS += -erroff=E_CAST_INT_CONST_TO_SMALL_INT
LENIENT_LINTTAGS += -erroff=E_CAST_TO_PTR_FROM_INT
LENIENT_LINTTAGS += -erroff=E_ASSIGN_INT_TO_SMALL_INT
LENIENT_LINTTAGS += -erroff=E_ASSIGN_INT_FROM_BIG_CONST
LENIENT_LINTTAGS += -erroff=E_CONST_PROMOTED_UNSIGNED_LL
LENIENT_LINTTAGS += -erroff=E_CONST_PROMOTED_LONG_LONG
LENIENT_LINTTAGS += -erroff=E_CONST_TRUNCATED_BY_ASSIGN
LENIENT_LINTTAGS += -erroff=E_PASS_INT_FROM_BIG_CONST
# These last three are still noisy but a bit more useful.
# They shouldn't be used on new code.
LENIENT_LINTTAGS += -erroff=E_ASSIGN_NARROW_CONV
LENIENT_LINTTAGS += -erroff=E_PASS_INT_TO_SMALL_INT
LENIENT_LINTTAGS += -erroff=E_PTR_CONV_LOSES_BITS

# comment out next line to turn on pedantic 64-bit error checking
LINTTAGS_64	+= $(LENIENT_LINTTAGS)

LINTFLAGS_32	= $(CCMODE) -nsxmuF -errtags=yes
LINTFLAGS_64	= $(LINTFLAGS_32) -errchk=longptr64
LINTFLAGS	= $(LINTFLAGS_$(CLASS)) $(LINTTAGS_$(CLASS))


#
#	Build the compile/assemble lines:
#
EXTRA_OPTIONS		 =
AS_DEFS			 = -D_ASM -D__STDC__=0

ALWAYS_DEFS_32		= -D_KERNEL -D_SYSCALL32
ALWAYS_DEFS_64		= -D_KERNEL -D_SYSCALL32 -D_SYSCALL32_IMPL -D_ELF64
ALWAYS_DEFS		= $(ALWAYS_DEFS_$(CLASS))

#
#	CPPFLAGS is deliberatly set with a "=" and not a "+=".  For the kernel
#	the header include path should not look for header files outside of
#	the kernel code.  This "=" removes the search path built in
#	Makefile.master inside CPPFLAGS.  Ditto for AS_CPPFLAGS.
#
CPPFLAGS	= $(ALWAYS_DEFS) $(ALL_DEFS) $(CONFIG_DEFS) \
		   $(INCLUDE_PATH) $(EXTRA_OPTIONS) 
ASFLAGS		+= -P
AS_CPPFLAGS	= $(ALWAYS_DEFS) $(ALL_DEFS) $(CONFIG_DEFS) $(AS_DEFS) \
		   $(AS_INC_PATH) $(EXTRA_OPTIONS)
CFLAGS		+= $(EXTRA_CFLAGS)
CFLAGS		+= $(XAOPT)
CFLAGS		+= $(INLINES)

#
#	Declare that $(OBJECTS) and $(LINTS) can be compiled in parallel.
#	The DUMMY target is for those instances where OBJECTS and LINTS
#	are empty (to avoid an unconditional .PARALLEL).
.PARALLEL:	$(OBJECTS) $(LINTS) DUMMY

#
#	Expanded dependencies
#
DEF_DEPS	= $(DEF_BUILDS:%=def.%)
ALL_DEPS	= $(ALL_BUILDS:%=all.%)
CLEAN_DEPS	= $(ALL_BUILDS:%=clean.%)
CLOBBER_DEPS	= $(ALL_BUILDS:%=clobber.%)
LINT_DEPS	= $(DEF_BUILDS:%=lint.%)
MODLINTLIB_DEPS	= $(DEF_BUILDS:%=modlintlib.%)
CLEAN_LINT_DEPS	= $(ALL_BUILDS:%=clean.lint.%)
INSTALL_DEPS	= $(DEF_BUILDS:%=install.%)

#
#	Default module name
#
BINARY		= $(OBJS_DIR)/$(MODULE)

#
#	Default cleanup definitions
#
CLEANLINTFILES	= $(LINTS) $(MOD_LINT_LIB)
CLEANFILES	= $(OBJECTS) $(CLEANLINTFILES)
CLOBBERFILES	= $(BINARY) $(CLEANFILES)

#
#	Installation constants:
#
#		FILEMODE is the mode given to the kernel modules
#		CFILEMODE is the mode given to the '.conf' files
#
FILEMODE	 = 755
DIRMODE		 = 755
OWNER		 = root
GROUP		 = sys
CFILEMODE	 = 644

#
#	Special Installation Macros for the installation of '.conf' files.
#
#	These are unique because they are not installed from the current
#	working directory.
#
# Sigh.  Apparently at some time in the past there was a confusion on
# whether the name is SRC_CONFFILE or SRC_CONFILE.  Consistency with the
# other names would indicate SRC_CONFFILE, but the voting is >180 Makefiles
# with SRC_CONFILE and about 11 with SRC_CONFFILE.  Software development
# isn't a popularity contest, though, and so my inclination is to define
# both names for now and incrementally convert to SRC_CONFFILE to be consistent
# with the other names. [ Jordan.Brown@west.sun.com 06/30/94 ]
#
CONFFILE	= $(MODULE).conf
SRC_CONFFILE	= $(CONF_SRCDIR)/$(CONFFILE)
SRC_CONFILE	= $(SRC_CONFFILE)
ROOT_CONFFILE	= $(ROOTMODULE).conf

INS.conffile= \
	$(RM) $@; $(INS) -s -m $(CFILEMODE) -f $(@D) $(SRC_CONFFILE)
$(CH)INS.conffile= \
    $(INS) -s -m $(CFILEMODE) -u $(OWNER) -g $(GROUP) -f $(@D) $(SRC_CONFFILE)

#
#	Installation directories
#

#
#	For now, 64b modules install into a subdirectory
#	of their 32b bretheren.
#
SUBDIR64_sparc		= sparcv9
SUBDIR64		= $(SUBDIR64_$(MACH))

ROOT_MOD_DIR		= $(ROOT)/kernel

ROOT_KERN_DIR_32	= $(ROOT_MOD_DIR)
ROOT_DRV_DIR_32		= $(ROOT_MOD_DIR)/drv
ROOT_EXEC_DIR_32	= $(ROOT_MOD_DIR)/exec
ROOT_FS_DIR_32		= $(ROOT_MOD_DIR)/fs
ROOT_SCHED_DIR_32	= $(ROOT_MOD_DIR)/sched
ROOT_STRMOD_DIR_32	= $(ROOT_MOD_DIR)/strmod
ROOT_SYS_DIR_32		= $(ROOT_MOD_DIR)/sys
ROOT_MISC_DIR_32	= $(ROOT_MOD_DIR)/misc
ROOT_KGSS_DIR_32	= $(ROOT_MOD_DIR)/misc/kgss
ROOT_NLMISC_DIR_32	= $(ROOT_MOD_DIR)/misc
ROOT_MACH_DIR_32	= $(ROOT_MOD_DIR)/mach
ROOT_CPU_DIR_32		= $(ROOT_MOD_DIR)/cpu
ROOT_TOD_DIR_32		= $(ROOT_MOD_DIR)/tod
ROOT_FONT_DIR_32	= $(ROOT_MOD_DIR)/fonts

ROOT_KERN_DIR_64	= $(ROOT_MOD_DIR)/$(SUBDIR64)
ROOT_DRV_DIR_64		= $(ROOT_MOD_DIR)/drv/$(SUBDIR64)
ROOT_EXEC_DIR_64	= $(ROOT_MOD_DIR)/exec/$(SUBDIR64)
ROOT_FS_DIR_64		= $(ROOT_MOD_DIR)/fs/$(SUBDIR64)
ROOT_SCHED_DIR_64	= $(ROOT_MOD_DIR)/sched/$(SUBDIR64)
ROOT_STRMOD_DIR_64	= $(ROOT_MOD_DIR)/strmod/$(SUBDIR64)
ROOT_SYS_DIR_64		= $(ROOT_MOD_DIR)/sys/$(SUBDIR64)
ROOT_MISC_DIR_64	= $(ROOT_MOD_DIR)/misc/$(SUBDIR64)
ROOT_KGSS_DIR_64	= $(ROOT_MOD_DIR)/misc/kgss/$(SUBDIR64)
ROOT_NLMISC_DIR_64	= $(ROOT_MOD_DIR)/misc/$(SUBDIR64)
ROOT_MACH_DIR_64	= $(ROOT_MOD_DIR)/mach/$(SUBDIR64)
ROOT_CPU_DIR_64		= $(ROOT_MOD_DIR)/cpu/$(SUBDIR64)
ROOT_TOD_DIR_64		= $(ROOT_MOD_DIR)/tod/$(SUBDIR64)
ROOT_FONT_DIR_64	= $(ROOT_MOD_DIR)/fonts/$(SUBDIR64)

ROOT_KERN_DIR		= $(ROOT_KERN_DIR_$(CLASS))
ROOT_DRV_DIR		= $(ROOT_DRV_DIR_$(CLASS))
ROOT_EXEC_DIR		= $(ROOT_EXEC_DIR_$(CLASS))
ROOT_FS_DIR		= $(ROOT_FS_DIR_$(CLASS))
ROOT_SCHED_DIR		= $(ROOT_SCHED_DIR_$(CLASS))
ROOT_STRMOD_DIR		= $(ROOT_STRMOD_DIR_$(CLASS))
ROOT_SYS_DIR		= $(ROOT_SYS_DIR_$(CLASS))
ROOT_MISC_DIR		= $(ROOT_MISC_DIR_$(CLASS))
ROOT_KGSS_DIR		= $(ROOT_KGSS_DIR_$(CLASS))
ROOT_NLMISC_DIR		= $(ROOT_NLMISC_DIR_$(CLASS))
ROOT_MACH_DIR		= $(ROOT_MACH_DIR_$(CLASS))
ROOT_CPU_DIR		= $(ROOT_CPU_DIR_$(CLASS))
ROOT_TOD_DIR		= $(ROOT_TOD_DIR_$(CLASS))
ROOT_FONT_DIR		= $(ROOT_FONT_DIR_$(CLASS))

ROOT_MOD_DIRS_32	= $(ROOT_DRV_DIR_32) $(ROOT_EXEC_DIR_32)
ROOT_MOD_DIRS_32	+= $(ROOT_FS_DIR_32) $(ROOT_SCHED_DIR_32)
ROOT_MOD_DIRS_32	+= $(ROOT_STRMOD_DIR_32) $(ROOT_SYS_DIR_32)
ROOT_MOD_DIRS_32	+= $(ROOT_MISC_DIR_32) $(ROOT_MACH_DIR_32)
ROOT_MOD_DIRS_32	+= $(ROOT_KGSS_DIR_32)
ROOT_MOD_DIRS_32	+= $(ROOT_CPU_DIR_32) $(ROOT_FONT_DIR_32)
ROOT_MOD_DIRS_32	+= $(ROOT_TOD_DIR_32)

USR_MOD_DIR		= $(ROOT)/usr/kernel

USR_DRV_DIR_32		= $(USR_MOD_DIR)/drv
USR_EXEC_DIR_32		= $(USR_MOD_DIR)/exec
USR_FS_DIR_32		= $(USR_MOD_DIR)/fs
USR_SCHED_DIR_32	= $(USR_MOD_DIR)/sched
USR_STRMOD_DIR_32	= $(USR_MOD_DIR)/strmod
USR_SYS_DIR_32		= $(USR_MOD_DIR)/sys
USR_MISC_DIR_32		= $(USR_MOD_DIR)/misc

USR_DRV_DIR_64		= $(USR_MOD_DIR)/drv/$(SUBDIR64)
USR_EXEC_DIR_64		= $(USR_MOD_DIR)/exec/$(SUBDIR64)
USR_FS_DIR_64		= $(USR_MOD_DIR)/fs/$(SUBDIR64)
USR_SCHED_DIR_64	= $(USR_MOD_DIR)/sched/$(SUBDIR64)
USR_STRMOD_DIR_64	= $(USR_MOD_DIR)/strmod/$(SUBDIR64)
USR_SYS_DIR_64		= $(USR_MOD_DIR)/sys/$(SUBDIR64)
USR_MISC_DIR_64		= $(USR_MOD_DIR)/misc/$(SUBDIR64)

USR_DRV_DIR		= $(USR_DRV_DIR_$(CLASS))
USR_EXEC_DIR		= $(USR_EXEC_DIR_$(CLASS))
USR_FS_DIR		= $(USR_FS_DIR_$(CLASS))
USR_SCHED_DIR		= $(USR_SCHED_DIR_$(CLASS))
USR_STRMOD_DIR		= $(USR_STRMOD_DIR_$(CLASS))
USR_SYS_DIR		= $(USR_SYS_DIR_$(CLASS))
USR_MISC_DIR		= $(USR_MISC_DIR_$(CLASS))

USR_MOD_DIRS_32		= $(USR_DRV_DIR_32) $(USR_EXEC_DIR_32)
USR_MOD_DIRS_32		+= $(USR_FS_DIR_32) $(USR_SCHED_DIR_32)
USR_MOD_DIRS_32		+= $(USR_STRMOD_DIR_32) $(USR_SYS_DIR_32)
USR_MOD_DIRS_32		+= $(USR_MISC_DIR_32)

#
#
#
include $(SRC)/Makefile.psm

#
#       Set ownership on links.
#
CHOWNLINK=
$(CH)CHOWNLINK= ; $(CHOWN) $(OWNER) $@
CHGRPLINK=
$(CH)CHGRPLINK= ; $(CHGRP) $(GROUP) $@

#
#	The "-r" on the remove may be considered temporary, but is required
#	while the replacement of the SUNW,SPARCstation-10,SX directory by
#	a symbolic link is being propagated.
#
INS.slink1= $(RM) -r $@; $(SYMLINK) $(PLATFORM) $@ $(CHOWNLINK) $(CHGRPLINK)
INS.slink2= $(RM) -r $@; $(SYMLINK) ../$(PLATFORM)/$(@F) $@ $(CHOWNLINK) $(CHGRPLINK)

ROOT_PLAT_LINKS		 = $(PLAT_LINKS:%=$(ROOT_PLAT_DIR)/%)
ROOT_PLAT_LINKS_2	 = $(PLAT_LINKS_2:%=$(ROOT_PLAT_DIR)/%)
USR_PLAT_LINKS		 = $(PLAT_LINKS:%=$(USR_PLAT_DIR)/%)
USR_PLAT_LINKS_2	 = $(PLAT_LINKS_2:%=$(USR_PLAT_DIR)/%)

#
#	Collection of all relevant, delivered kernel modules.
#
KMODS	= $(DRV_KMODS) $(EXEC_KMODS) $(FS_KMODS) $(SCHED_KMODS) $(TOD_KMODS) \
	  $(STRMOD_KMODS) $(SYS_KMODS) $(MISC_KMODS) $(NLMISC_KMODS) \
	  $(MACH_KMODS) $(CPU_KMODS) $(PLAT_KMODS) $(GENUNIX_KMODS) \
	  $(GSS_KMODS) $(MMU_KMODS)

LINT_KMODS = $(DRV_KMODS) $(EXEC_KMODS) $(FS_KMODS) $(SCHED_KMODS) \
	  $(STRMOD_KMODS) $(SYS_KMODS) $(MISC_KMODS) \
	  $(MACH_KMODS) $(GSS_KMODS)

#
#	Files to be compiled with -xa, to generate basic block execution
#	count data.
#
#	There are several ways to compile parts of the kernel for kcov:
#		1)  Add things to BB_FILES here or in other Makefiles
#		2)  setenv BB_FILES '$(XXXX_OBJS)'
#		3)  setenv BB_FILES '$(OBJECTS)'
# 
#	Do NOT setenv CFLAGS -xa, as that will cause infinite recursion
#	in unix_bb.o 
# 
BB_FILES =
$(BB_FILES)	:= XAOPT = -xa

#
#	The idea here is for unix_bb.o to be in all kernels except the
#	kernel which actually gets shipped to customers.  In practice,
#	$(RELEASE_BUILD) is on for a number of the late beta and fcs builds.
#
CODE_COVERAGE=
$(RELEASE_BUILD)CODE_COVERAGE:sh=	echo \\043
$(CODE_COVERAGE)unix_bb.o	:= CPPFLAGS	+= -DKCOV
$(CODE_COVERAGE)unix_bb.ln	:= CPPFLAGS	+= -DKCOV

#
#	Do not let unix_bb.o get compiled with -xa!
#
$(OBJS_DIR)/unix_bb.o	:= XAOPT =

#
#	MPSAS support
#
MPSAS_BUILD:sh=		echo \\043

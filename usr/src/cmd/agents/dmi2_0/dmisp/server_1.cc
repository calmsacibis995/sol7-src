// Copyright 01/24/97 Sun Microsystems, Inc. All Rights Reserved.
//
#pragma ident  "@(#)server_svc.cc	1.6 97/01/24 Sun Microsystems"

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "server.h"
#include <stdio.h>
#include <stdlib.h> /* getenv, exit */
#include <rpc/pmap_clnt.h> /* for pmap_unset */
#include <string.h> /* strcmp */
#include <signal.h>
#ifdef __cplusplus
#include <sysent.h> /* getdtablesize, open */
#endif /* __cplusplus */
#include <unistd.h> /* setsid */
#include <sys/types.h>
#include <memory.h>
#include <stropts.h>
#include <netconfig.h>
#include <sys/resource.h> /* rlimit */
#include <syslog.h>

//extern void InitDmiInfo();
extern "C" void get_myaddress(struct sockaddr_in *addr);

#ifndef SIG_PF
#define	SIG_PF void(*)(int)
#endif

#ifdef DEBUG
#define	RPC_SVC_FG
#endif

#define	_RPCSVC_CLOSEDOWN 120
static int _rpcpmstart;		/* Started by a port monitor ? */

/* States a server can be in wrt request */

#define	_IDLE 0
#define	_SERVED 1

static int _rpcsvcstate = _IDLE;	/* Set when a request is serviced */
static int _rpcsvccount = 0;		/* Number of requests being serviced */

static
void _msgout(char* msg)
{
#ifdef RPC_SVC_FG
	if (_rpcpmstart)
		syslog(LOG_ERR, msg);
	else
		(void) fprintf(stderr, "%s\n", msg);
#else
	syslog(LOG_ERR, msg);
#endif
}

static void
closedown(int sig)
{
	if (_rpcsvcstate == _IDLE && _rpcsvccount == 0) {
		extern fd_set svc_fdset;
		static int size;
		int i, openfd;
		struct t_info tinfo;

		if (!t_getinfo(0, &tinfo) && (tinfo.servtype == T_CLTS))
			exit(0);
		if (size == 0) {
			struct rlimit rl;

			rl.rlim_max = 0;
			getrlimit(RLIMIT_NOFILE, &rl);
			if ((size = rl.rlim_max) == 0) {
				return;
			}
		}
		for (i = 0, openfd = 0; i < size && openfd < 2; i++)
			if (FD_ISSET(i, &svc_fdset))
				openfd++;
		if (openfd <= 1)
			exit(0);
	} else
		_rpcsvcstate = _IDLE;

	(void) signal(SIGALRM, (SIG_PF) closedown);
	(void) alarm(_RPCSVC_CLOSEDOWN/2);
}

static void
dmi2_server_0x1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		DmiRegisterIN _dmiregister_0x1_arg;
		DmiUnregisterIN _dmiunregister_0x1_arg;
		DmiGetVersionIN _dmigetversion_0x1_arg;
		DmiGetConfigIN _dmigetconfig_0x1_arg;
		DmiSetConfigIN _dmisetconfig_0x1_arg;
		DmiListComponentsIN _dmilistcomponents_0x1_arg;
		DmiListComponentsByClassIN _dmilistcomponentsbyclass_0x1_arg;
		DmiListLanguagesIN _dmilistlanguages_0x1_arg;
		DmiListClassNamesIN _dmilistclassnames_0x1_arg;
		DmiListGroupsIN _dmilistgroups_0x1_arg;
		DmiListAttributesIN _dmilistattributes_0x1_arg;
		DmiAddRowIN _dmiaddrow_0x1_arg;
		DmiDeleteRowIN _dmideleterow_0x1_arg;
		DmiGetMultipleIN _dmigetmultiple_0x1_arg;
		DmiSetMultipleIN _dmisetmultiple_0x1_arg;
		DmiAddComponentIN _dmiaddcomponent_0x1_arg;
		DmiAddLanguageIN _dmiaddlanguage_0x1_arg;
		DmiAddGroupIN _dmiaddgroup_0x1_arg;
		DmiDeleteComponentIN _dmideletecomponent_0x1_arg;
		DmiDeleteLanguageIN _dmideletelanguage_0x1_arg;
		DmiDeleteGroupIN _dmideletegroup_0x1_arg;
		DmiGetAttributeIN _dmigetattribute_0x1_arg;
		DmiSetAttributeIN _dmisetattribute_0x1_arg;
	} argument;
	char *result;
	xdrproc_t xdr_argument, xdr_result;
	char *(*local)(char *, struct svc_req *);

	_rpcsvccount++;
	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply(transp,
			(xdrproc_t) xdr_void, (char *)NULL);
		_rpcsvccount--;
		_rpcsvcstate = _SERVED;
		return;

	case _DmiRegister:
		xdr_argument = (xdrproc_t) xdr_DmiRegisterIN;
		xdr_result = (xdrproc_t) xdr_DmiRegisterOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmiregister_0x1_svc;
		break;

	case _DmiUnregister:
		xdr_argument = (xdrproc_t) xdr_DmiUnregisterIN;
		xdr_result = (xdrproc_t) xdr_DmiUnregisterOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmiunregister_0x1_svc;
		break;

	case _DmiGetVersion:
		xdr_argument = (xdrproc_t) xdr_DmiGetVersionIN;
		xdr_result = (xdrproc_t) xdr_DmiGetVersionOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmigetversion_0x1_svc;
		break;

	case _DmiGetConfig:
		xdr_argument = (xdrproc_t) xdr_DmiGetConfigIN;
		xdr_result = (xdrproc_t) xdr_DmiGetConfigOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmigetconfig_0x1_svc;
		break;

	case _DmiSetConfig:
		xdr_argument = (xdrproc_t) xdr_DmiSetConfigIN;
		xdr_result = (xdrproc_t) xdr_DmiSetConfigOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmisetconfig_0x1_svc;
		break;

	case _DmiListComponents:
		xdr_argument = (xdrproc_t) xdr_DmiListComponentsIN;
		xdr_result = (xdrproc_t) xdr_DmiListComponentsOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmilistcomponents_0x1_svc;
		break;

	case _DmiListComponentsByClass:
		xdr_argument = (xdrproc_t) xdr_DmiListComponentsByClassIN;
		xdr_result = (xdrproc_t) xdr_DmiListComponentsByClassOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmilistcomponentsbyclass_0x1_svc;
		break;

	case _DmiListLanguages:
		xdr_argument = (xdrproc_t) xdr_DmiListLanguagesIN;
		xdr_result = (xdrproc_t) xdr_DmiListLanguagesOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmilistlanguages_0x1_svc;
		break;

	case _DmiListClassNames:
		xdr_argument = (xdrproc_t) xdr_DmiListClassNamesIN;
		xdr_result = (xdrproc_t) xdr_DmiListClassNamesOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmilistclassnames_0x1_svc;
		break;

	case _DmiListGroups:
		xdr_argument = (xdrproc_t) xdr_DmiListGroupsIN;
		xdr_result = (xdrproc_t) xdr_DmiListGroupsOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmilistgroups_0x1_svc;
		break;

	case _DmiListAttributes:
		xdr_argument = (xdrproc_t) xdr_DmiListAttributesIN;
		xdr_result = (xdrproc_t) xdr_DmiListAttributesOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmilistattributes_0x1_svc;
		break;

	case _DmiAddRow:
		xdr_argument = (xdrproc_t) xdr_DmiAddRowIN;
		xdr_result = (xdrproc_t) xdr_DmiAddRowOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmiaddrow_0x1_svc;
		break;

	case _DmiDeleteRow:
		xdr_argument = (xdrproc_t) xdr_DmiDeleteRowIN;
		xdr_result = (xdrproc_t) xdr_DmiDeleteRowOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmideleterow_0x1_svc;
		break;

	case _DmiGetMultiple:
		xdr_argument = (xdrproc_t) xdr_DmiGetMultipleIN;
		xdr_result = (xdrproc_t) xdr_DmiGetMultipleOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmigetmultiple_0x1_svc;
		break;

	case _DmiSetMultiple:
		xdr_argument = (xdrproc_t) xdr_DmiSetMultipleIN;
		xdr_result = (xdrproc_t) xdr_DmiSetMultipleOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmisetmultiple_0x1_svc;
		break;

	case _DmiAddComponent:
		xdr_argument = (xdrproc_t) xdr_DmiAddComponentIN;
		xdr_result = (xdrproc_t) xdr_DmiAddComponentOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmiaddcomponent_0x1_svc;
		break;

	case _DmiAddLanguage:
		xdr_argument = (xdrproc_t) xdr_DmiAddLanguageIN;
		xdr_result = (xdrproc_t) xdr_DmiAddLanguageOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmiaddlanguage_0x1_svc;
		break;

	case _DmiAddGroup:
		xdr_argument = (xdrproc_t) xdr_DmiAddGroupIN;
		xdr_result = (xdrproc_t) xdr_DmiAddGroupOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmiaddgroup_0x1_svc;
		break;

	case _DmiDeleteComponent:
		xdr_argument = (xdrproc_t) xdr_DmiDeleteComponentIN;
		xdr_result = (xdrproc_t) xdr_DmiDeleteComponentOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmideletecomponent_0x1_svc;
		break;

	case _DmiDeleteLanguage:
		xdr_argument = (xdrproc_t) xdr_DmiDeleteLanguageIN;
		xdr_result = (xdrproc_t) xdr_DmiDeleteLanguageOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmideletelanguage_0x1_svc;
		break;

	case _DmiDeleteGroup:
		xdr_argument = (xdrproc_t) xdr_DmiDeleteGroupIN;
		xdr_result = (xdrproc_t) xdr_DmiDeleteGroupOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmideletegroup_0x1_svc;
		break;

	case _DmiGetAttribute:
		xdr_argument = (xdrproc_t) xdr_DmiGetAttributeIN;
		xdr_result = (xdrproc_t) xdr_DmiGetAttributeOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmigetattribute_0x1_svc;
		break;

	case _DmiSetAttribute:
		xdr_argument = (xdrproc_t) xdr_DmiSetAttributeIN;
		xdr_result = (xdrproc_t) xdr_DmiSetAttributeOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmisetattribute_0x1_svc;
		break;

	default:
		svcerr_noproc(transp);
		_rpcsvccount--;
		_rpcsvcstate = _SERVED;
		return;
	}
	(void) memset((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs(transp, xdr_argument, (caddr_t) &argument)) {
		svcerr_decode(transp);
		_rpcsvccount--;
		_rpcsvcstate = _SERVED;
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, xdr_result, result)) {
		svcerr_systemerr(transp);
	}
	if (!svc_freeargs(transp, xdr_argument, (caddr_t) &argument)) {
		_msgout("unable to free arguments");
		exit(1);
	}
	_rpcsvccount--;
	_rpcsvcstate = _SERVED;
	return;
}

static void
dmi2_cserver_0x1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		DmiRegisterCiIN _dmiregisterci_0x1_arg;
		DmiUnregisterCiIN _dmiunregisterci_0x1_arg;
		DmiOriginateEventIN _dmioriginateevent_0x1_arg;
	} argument;
	char *result;
	xdrproc_t xdr_argument, xdr_result;
	char *(*local)(char *, struct svc_req *);

	_rpcsvccount++;
	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply(transp,
			(xdrproc_t) xdr_void, (char *)NULL);
		_rpcsvccount--;
		_rpcsvcstate = _SERVED;
		return;

	case _DmiRegisterCi:
		xdr_argument = (xdrproc_t) xdr_DmiRegisterCiIN;
		xdr_result = (xdrproc_t) xdr_DmiRegisterCiOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmiregisterci_0x1_svc;
		break;

	case _DmiUnregisterCi:
		xdr_argument = (xdrproc_t) xdr_DmiUnregisterCiIN;
		xdr_result = (xdrproc_t) xdr_DmiUnregisterCiOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmiunregisterci_0x1_svc;
		break;

	case _DmiOriginateEvent:
		xdr_argument = (xdrproc_t) xdr_DmiOriginateEventIN;
		xdr_result = (xdrproc_t) xdr_DmiOriginateEventOUT;
		local = (char *(*)(char *, struct svc_req *)) _dmioriginateevent_0x1_svc;
		break;

	default:
		svcerr_noproc(transp);
		_rpcsvccount--;
		_rpcsvcstate = _SERVED;
		return;
	}
	(void) memset((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs(transp, xdr_argument, (caddr_t) &argument)) {
		svcerr_decode(transp);
		_rpcsvccount--;
		_rpcsvcstate = _SERVED;
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, xdr_result, result)) {
		svcerr_systemerr(transp);
	}
	if (!svc_freeargs(transp, xdr_argument, (caddr_t) &argument)) {
		_msgout("unable to free arguments");
		exit(1);
	}
	_rpcsvccount--;
	_rpcsvcstate = _SERVED;
	return;
}

void server_svc()
{
	pid_t pid;
	int i;
	char mname[FMNAMESZ + 1];
        struct sockaddr_in mysockaddr;

	(void) sigset(SIGPIPE, SIG_IGN);

        get_myaddress(&mysockaddr);
        
        if (pmap_getport(&mysockaddr, DMI2_SERVER, DMI2_SERVER_VERSION, IPPROTO_TCP)
     || (pmap_getport(&mysockaddr, DMI2_SERVER, DMI2_SERVER_VERSION, IPPROTO_UDP))){
      _msgout("One instance of this daemon is already running on this machine");
            exit(1);
        }

	if (!ioctl(0, I_LOOK, mname) &&
		(!strcmp(mname, "sockmod") || !strcmp(mname, "timod"))) {
		char *netid;
		struct netconfig *nconf = NULL;
		SVCXPRT *transp;
		int pmclose;

		_rpcpmstart = 1;
		openlog("server", LOG_PID, LOG_DAEMON);

		if ((netid = getenv("NLSPROVIDER")) == NULL) {
		/* started from inetd */
			pmclose = 1;
		} else {
			if ((nconf = getnetconfigent(netid)) == NULL)
				_msgout("cannot get transport info");

			pmclose = (t_getstate(0) != T_DATAXFER);
		}
		if (strcmp(mname, "sockmod") == 0) {
			if (ioctl(0, I_POP, 0) || ioctl(0, I_PUSH, "timod")) {
				_msgout("could not get the right module");
				exit(1);
			}
		}
		if ((transp = svc_tli_create(0, nconf, NULL, 0, 0)) == NULL) {
			_msgout("cannot create server handle");
			exit(1);
		}
		if (nconf)
			freenetconfigent(nconf);
		if (!svc_reg(transp, DMI2_SERVER, DMI2_SERVER_VERSION, dmi2_server_0x1, 0)) {
			_msgout("unable to register (DMI2_SERVER, DMI2_SERVER_VERSION).");
			exit(1);
		}
		if (!svc_reg(transp, DMI2_CSERVER, DMI2_CSERVER_VERSION, dmi2_cserver_0x1, 0)) {
			_msgout("unable to register (DMI2_CSERVER, DMI2_CSERVER_VERSION).");
			exit(1);
		}
		if (pmclose) {
			(void) signal(SIGALRM, (SIG_PF) closedown);
			(void) alarm(_RPCSVC_CLOSEDOWN/2);
		}
//		InitDmiInfo();
		svc_run();
		exit(1);
		/* NOTREACHED */
	}	else {
#ifndef RPC_SVC_FG
		int size;
		struct rlimit rl;
		pid = fork();
		if (pid < 0) {
			perror("cannot fork");
			exit(1);
		}
		if (pid)
			exit(0);
		rl.rlim_max = 0;
		getrlimit(RLIMIT_NOFILE, &rl);
		if ((size = rl.rlim_max) == 0)
			exit(1);
		for (i = 0; i < size; i++)
			(void) close(i);
		i = open("/dev/console", 2);
		(void) dup2(i, 1);
		(void) dup2(i, 2);
		setsid();
		openlog("server", LOG_PID, LOG_DAEMON);
#endif
	}
	if (!svc_create(dmi2_server_0x1, DMI2_SERVER, DMI2_SERVER_VERSION, "netpath")) {
		_msgout("unable to create (DMI2_SERVER, DMI2_SERVER_VERSION) for netpath.");
		exit(1);
	}
	if (!svc_create(dmi2_cserver_0x1, DMI2_CSERVER, DMI2_CSERVER_VERSION, "netpath")) {
		_msgout("unable to create (DMI2_CSERVER, DMI2_CSERVER_VERSION) for netpath.");
		exit(1);
	}

//	InitDmiInfo();
	svc_run();
	_msgout("svc_run returned");
	exit(1);
	/* NOTREACHED */
}

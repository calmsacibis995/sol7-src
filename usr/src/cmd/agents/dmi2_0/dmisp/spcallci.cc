// Copyright 09/11/96 Sun Microsystems, Inc. All Rights Reserved.
//
#pragma ident  "@(#)spcallci.cc	1.7 96/09/11 Sun Microsystems"

/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */
#include <stdlib.h>
#include <stream.h>
#include "ci_callback.h"
#include "dmi_error.hh"
#include "util.hh"

bool_t 
cigetattribute(u_long prognum, CiGetAttributeIN *argp, CiGetAttributeOUT *result)
{
	CLIENT *clnt;

	clnt = clnt_create("localhost", prognum, DMI2_CI_CALLBACK_VERSION, "netpath");
	if (clnt == (CLIENT *) NULL) {
		clnt_pcreateerror("localhost");
		return (FALSE); 
	}

	CiGetAttributeOUT *result_1 = _cigetattribute_0x1(argp, clnt);
	if (result_1 == (CiGetAttributeOUT *) NULL) {
		clnt_perror(clnt, "call failed");
		clnt_destroy(clnt);
		return (FALSE); 
	}

	memcpy(result, result_1, sizeof(CiGetAttributeOUT)); 
	clnt_destroy(clnt);
	return (TRUE); 
}

bool_t 
cigetnextattribute(u_long prognum, CiGetNextAttributeIN *argp, CiGetNextAttributeOUT *result)
{
	CLIENT *clnt;

	clnt = clnt_create("localhost", prognum, DMI2_CI_CALLBACK_VERSION, "netpath");
	if (clnt == (CLIENT *) NULL) {
		clnt_pcreateerror("localhost");
		return (FALSE); 
	}

	CiGetNextAttributeOUT *result_1 = _cigetnextattribute_0x1(argp, clnt);
	if (result_1 == (CiGetNextAttributeOUT *) NULL) {
		clnt_perror(clnt, "call failed");
		clnt_destroy(clnt);
		return (FALSE); 
	}

	memcpy(result, result_1, sizeof(CiGetNextAttributeOUT)); 

	clnt_destroy(clnt);
	return (TRUE); 
}

bool_t 
cisetattribute(u_long prognum, CiSetAttributeIN *argp, DmiErrorStatus_t *result)
{
	CLIENT *clnt;

	clnt = clnt_create("localhost", prognum, DMI2_CI_CALLBACK_VERSION, "netpath");
	if (clnt == (CLIENT *) NULL) {
		clnt_pcreateerror("localhost");
		return (FALSE); 
	}

	DmiErrorStatus_t *result_1 = _cisetattribute_0x1(argp, clnt);
	if (result_1 == (DmiErrorStatus_t *) NULL) {
		clnt_perror(clnt, "call failed");
		clnt_destroy(clnt);
		return (FALSE); 
	}

	memcpy(result, result_1, sizeof(DmiErrorStatus_t)); 
	clnt_destroy(clnt);
}
	
bool_t 
cireserveattribute(u_long prognum, CiReserveAttributeIN *argp, DmiErrorStatus_t *result)
{
	CLIENT *clnt;

	clnt = clnt_create("localhost", prognum, DMI2_CI_CALLBACK_VERSION, "netpath");
	if (clnt == (CLIENT *) NULL) {
		clnt_pcreateerror("localhost");
		return (FALSE); 
	}

	DmiErrorStatus_t *result_1 = _cireserveattribute_0x1(argp, clnt);
	if (result_1 == (DmiErrorStatus_t *) NULL) {
		clnt_perror(clnt, "call failed");
		clnt_destroy(clnt);
		return (FALSE); 
	}

	memcpy(result, result_1, sizeof(DmiErrorStatus_t)); 

	clnt_destroy(clnt);
}

bool_t 
cireleaseattribute(u_long prognum, CiReleaseAttributeIN *argp, DmiErrorStatus_t *result)
{
	CLIENT *clnt;

	clnt = clnt_create("localhost", prognum, DMI2_CI_CALLBACK_VERSION, "netpath");
	if (clnt == (CLIENT *) NULL) {
		clnt_pcreateerror("localhost");
		return (FALSE); 
	}
	
	DmiErrorStatus_t *result_1 = _cireleaseattribute_0x1(argp, clnt);
	if (result_1 == (DmiErrorStatus_t *) NULL) {
		clnt_perror(clnt, "call failed");
		clnt_destroy(clnt);
		return (FALSE); 
	}
	
	memcpy(result, result_1, sizeof(DmiErrorStatus_t)); 

	clnt_destroy(clnt);
}


bool_t 
ciaddrow(u_long prognum, CiAddRowIN *argp, DmiErrorStatus_t *result)
{
	CLIENT *clnt;

	clnt = clnt_create("localhost", prognum, DMI2_CI_CALLBACK_VERSION, "netpath");
	if (clnt == (CLIENT *) NULL) {
		clnt_pcreateerror("localhost");
		return (FALSE); 
	}
	
	DmiErrorStatus_t *result_1 = _ciaddrow_0x1(argp, clnt);
	if (result_1 == (DmiErrorStatus_t *) NULL) {
		clnt_perror(clnt, "call failed");
		clnt_destroy(clnt);
		return (FALSE); 
	}
	
	
	memcpy(result, result_1, sizeof(DmiErrorStatus_t)); 

	clnt_destroy(clnt);
}

bool_t 
cideleterow(u_long prognum, CiDeleteRowIN *argp, DmiErrorStatus_t *result)
{
	CLIENT *clnt;

	clnt = clnt_create("localhost", prognum, DMI2_CI_CALLBACK_VERSION, "netpath");
	if (clnt == (CLIENT *) NULL) {
		clnt_pcreateerror("localhost");
		return (FALSE); 
	}

	DmiErrorStatus_t *result_1 = _cideleterow_0x1(argp, clnt);
	if (result_1 == (DmiErrorStatus_t *) NULL) {
		clnt_perror(clnt, "call failed");
		clnt_destroy(clnt);
		return (FALSE); 
	}
	
	memcpy(result, result_1, sizeof(DmiErrorStatus_t)); 

	clnt_destroy(clnt);
}
	

#!/sbin/sh
#
# Copyright (c) 1995, 1997-1998 by Sun Microsystems, Inc.
# All rights reserved.
#
#ident	"@(#)inetinit	1.33	98/02/03 SMI"

#
# This is the second phase of TCP/IP configuration.  The first part,
# run in the "/etc/rcS.d/S30rootusr.sh" script, does all configuration
# necessary to mount the "/usr" filesystem via NFS.  This includes configuring
# the interfaces and setting the machine's hostname.  The second part,
# run in this script, does all configuration that can be done before
# NIS or NIS+ is started.  This includes configuring IP routing,
# setting the NIS domainname and setting any tunable parameters.  The
# third part, run in a subsequent startup script, does all
# configuration that may be dependent on NIS/NIS+ maps.  This includes
# a final re-configuration of the interfaces and starting all internet
# services.
#

case "$1" in
'start')
	;; # Fall through -- rest of script is the initialization code

'stop')
	#
	# If we were routing dynamically, we will note this with
	# the .dynamic_routing file, so that we can leave the routes
	# in place without thinking they're static route entries
	# when we come back into states 2 or 3.
	#
	if /usr/bin/pgrep -x -u 0 'in.routed|in.rdisc' >/dev/null 2>&1; then
		/usr/bin/pkill -x -u 0 'in.routed|in.rdisc'
		> /etc/.dynamic_routing
	fi
	exit 0
	;;

*)
	echo "Usage: $0 { start | stop }"
	exit 1
	;;
esac

# Set TCP ISS generation.  By default the ISS generation is
# time + random()-delta.  This might not be strong enough for some users.
#
# See /etc/default/inetinit for settings and further info.

# Set the RFC 1948 entropy, regardless of if I'm using it or not.
#
# Use the encrypted root password as a source of entropy.  Otherwise,
# just use the pre-set (and hopefully difficult to guess) entropy that
# tcp used when it loaded.

encr=`awk -F: '/^root:/ {print $2}' /etc/shadow`
[ -z "$encr" ] || /usr/sbin/ndd -set /dev/tcp tcp_1948_phrase $encr
unset encr

# Get value of TCP_STRONG_ISS
[ -f /etc/default/inetinit ] && . /etc/default/inetinit

# Use value of TCP_STRONG_ISS specified in /etc/default/inetinit, otherwise
# use TCP's internal default setting.

if [ $TCP_STRONG_ISS ]; then
	/usr/sbin/ndd -set /dev/tcp tcp_strong_iss $TCP_STRONG_ISS
fi

#
# Configure default routers using the local "/etc/defaultrouter"
# configuration file.  The file can contain the hostnames or IP
# addresses of one or more default routers.  If hostnames are used,
# each hostname must also be listed in the local "/etc/hosts" file
# because NIS and NIS+ are not running at the time that this script is
# run.  Each router name or address is listed on a single line by
# itself in the file.  Anything else on that line after the router's
# name or address is ignored.  Lines that begin with "#" are
# considered comments and ignored.
#
# The default routes listed in the "/etc/defaultrouter" file will
# replace those added by the kernel during diskless booting.  An
# empty "/etc/defaultrouter" file will cause the default route
# added by the kernel to be deleted.
#
if [ "x`echo /etc/dhcp.*[0-9]`" = 'x/etc/dhcp.*[0-9]' ]; then
	defrouters=
	try_dhcp=no
else
	defrouters=`/sbin/dhcpinfo Router`
	if [ $? -eq 2 ]; then
		>/tmp/.notdhcp
		try_dhcp=no
	else
		[ -f /tmp/.notdhcp ] && /usr/bin/rm -f /tmp/.notdhcp
		try_dhcp=yes
	fi
fi

if [ -z "$defrouters" -a -f /etc/defaultrouter ]; then
	defrouters=`grep -v \^\# /etc/defaultrouter | awk '{print $1}'`
	if [ -n "$defrouters" ]; then
		#
		# To support diskless operation with a "/usr"
		# filesystem NFS mounted from a server located on a
		# remote subnet, we have to be very careful about
		# replacing default routes.  We want the default
		# routers listed in the "/etc/defaultrouter" file to
		# replace the default router added by the bootparams
		# protocol.  But we can't have a window of time when
		# the system has no default routers in the process.
		# That would cause a deadlock since the "route"
		# command lives on the "/usr" filesystem.
		#
		pass=1
		for router in $defrouters; do
			if [ $pass -eq 1 ]; then
				/usr/sbin/route -f add default $router
			else
				/usr/sbin/route add default $router
			fi
			pass=2
		done
	else
		/usr/sbin/route -f
	fi
fi

#
# Set NIS domainname if locally configured.
#
if [ -f /etc/defaultdomain ]; then
	/usr/bin/domainname `cat /etc/defaultdomain`
	echo "NIS domainname is `/usr/bin/domainname`"
fi

#
# Run routed/router discovery if we don't already have a default
# route installed or if we had been running them in a previous
# multiuser state.
#
if [ -z "$defrouters" -a ! -f /etc/.dynamic_routing ]; then
	#
	# No default routes were setup by "route" command above - check the
	# kernel routing table for any other default routes.
	#
	/usr/bin/netstat -rn | /usr/bin/grep default >/dev/null 2>&1 && \
	    defrouters=yes
fi
[ -f /etc/.dynamic_routing ] && /usr/bin/rm -f /etc/.dynamic_routing

if [ -z "$defrouters" ]; then
	#
	# Determine how many active interfaces there are and how many pt-pt
	# interfaces. Act as a router if there are more than 2 interfaces 
	# (including the loopback interface) or one or more point-point 
	# interface. Also act as a router if /etc/gateways exists.
	#
	# Do NOT act as a router if /etc/notrouter exists.
	# Do NOT act as a router if DHCP was used to configure interface(s)
	#
	inetifaddrs="`/usr/sbin/ifconfig -au | /usr/bin/grep inet`"
	numifs=`echo "$inetifaddrs" | /usr/bin/wc -l`
	numptptifs=`echo "$inetifaddrs" | /usr/bin/egrep -c -e '-->'`

	if [ $try_dhcp = yes ]; then
		numdhcp=`/usr/sbin/ifconfig -a | grep -c DHCP`
	else
		numdhcp=0
	fi

	if [ ! -f /etc/notrouter -a $numdhcp -eq 0 -a \
	    \( $numifs -gt 2 -o $numptptifs -gt 0 -o -f /etc/gateways \) ]
	then
		# Machine is a router: turn on ip_forwarding, run routed,
		# and advertise ourselves as a router using router discovery.

		echo 'machine is a router.'
		/usr/sbin/ndd -set /dev/ip ip_forwarding 1

		[ -f /usr/sbin/in.routed ] && /usr/sbin/in.routed -s
		[ -f /usr/sbin/in.rdisc ] && /usr/sbin/in.rdisc -r

	else
		# Machine is a host: if router discovery finds a router then
		# we rely on router discovery. If there are not routers
		# advertising themselves through router discovery
		# run routed in space-saving mode.
		# Turn off ip_forwarding

		if [ $try_dhcp = yes ]; then
			forwarding=`/sbin/dhcpinfo IpFwdF`
			[ -z "$forwarding" ] && forwarding=0
		else
			forwarding=0
		fi

		/usr/sbin/ndd -set /dev/ip ip_forwarding $forwarding

		if [ -f /usr/sbin/in.rdisc ] && /usr/sbin/in.rdisc -s; then
			echo 'starting router discovery.'
		elif [  -f /usr/sbin/in.routed ]; then
			/usr/sbin/in.routed -q
			echo 'starting routing daemon.'
		fi
	fi
else
	if [ $try_dhcp = yes ]; then
		forwarding=`/sbin/dhcpinfo IpFwdF`
		[ -z "$forwarding" ] && forwarding=0
	else
		forwarding=0
	fi

	/usr/sbin/ndd -set /dev/ip ip_forwarding $forwarding
fi

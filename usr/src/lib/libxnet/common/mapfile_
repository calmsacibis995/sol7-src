#
#ident	"@(#)mapfile-vers	1.7	97/01/30 SMI"
#
# Copyright (c) 1996 by Sun Microsystems, Inc.
# All rights reserved.
#
#
# Generic interface definition for usr/src/lib/libxnet.
#
# For information regarding the establishment of versioned definitions see:
#	The Linker and Libraries Manual (version 2.5 or greater)
# This is part of the Developers Guide in the Answerbook.  Specifically refer
# to Chapter 2 under section "Defining Additional Symbols" through section
# "Reducing Symbol Scope", and Chapter 5 "Versioning".
#
# For specific OSNET rules for the modification (evolution) of these version
# definitions see:
#	Policy for Shared Library Version Names and Interface Definitions


SUNW_1.1 {
	global:

#	Sockets (X/Open CAE Specification (1994), page 6):
		accept = FUNCTION;

#	Note that both the ``bind'' and ``__xnet_bind'' symbols are
#	included here because the CAE specification permits reference to
#	this symbol both with and without including the header file which
#	redefines ``bind'' to ``__xnet_bind.''
		bind = FUNCTION;
		__xnet_bind = FUNCTION;

#	Note that both the ``connect'' and ``__xnet_connect'' symbols are
#	included here because the CAE specification permits reference to
#	this symbol both with and without including the header file which
#	redefines ``connect'' to ``__xnet_connect.''
		connect = FUNCTION;
		__xnet_connect = FUNCTION;

		getpeername = FUNCTION;
		getsockname = FUNCTION;

#	Note that both the ``getsockopt'' and ``__xnet_getsockopt'' symbols are
#	included here because the CAE specification permits reference to
#	this symbol both with and without including the header file which
#	redefines ``getsockopt'' to ``__xnet_getsockopt.''
		getsockopt = FUNCTION;
		__xnet_getsockopt = FUNCTION;

#	Note that both the ``listen'' and ``__xnet_listen'' symbols are
#	included here because the CAE specification permits reference to
#	this symbol both with and without including the header file which
#	redefines ``listen'' to ``__xnet_listen.''
		listen = FUNCTION;
		__xnet_listen = FUNCTION;

		recv = FUNCTION;
		recvfrom = FUNCTION;

#	Note that both the ``recvmsg'' and ``__xnet_recvmsg'' symbols are
#	included here because the CAE specification permits reference to
#	this symbol both with and without including the header file which
#	redefines ``recvmsg'' to ``__xnet_recvmsg.''
		recvmsg = FUNCTION;
		__xnet_recvmsg = FUNCTION;

		send = FUNCTION;

#	Note that both the ``sendmsg'' and ``__xnet_sendmsg'' symbols are
#	included here because the CAE specification permits reference to
#	this symbol both with and without including the header file which
#	redefines ``sendmsg'' to ``__xnet_sendmsg.''
		sendmsg = FUNCTION;
		__xnet_sendmsg = FUNCTION;

#	Note that both the ``sendto'' and ``__xnet_sendto'' symbols are
#	included here because the CAE specification permits reference to
#	this symbol both with and without including the header file which
#	redefines ``sendto'' to ``__xnet_sendto.''
		sendto = FUNCTION;
		__xnet_sendto = FUNCTION;

		setsockopt = FUNCTION;
		shutdown = FUNCTION;
#	Note that both the ``socket'' and ``__xnet_socket'' symbols are
#	included here because the CAE specification permits reference to
#	this symbol both with and without including the header file which
#	redefines ``socket'' to ``__xnet_socket.''
		socket = FUNCTION;
		__xnet_socket = FUNCTION;

#	Note that both the ``socketpair'' and ``__xnet_socketpair'' symbols are
#	included here because the CAE specification permits reference to
#	this symbol both with and without including the header file which
#	redefines ``socketpair'' to ``__xnet_socketpair.''
		socketpair = FUNCTION;
		__xnet_socketpair = FUNCTION;

#	X/Open Networking Services, Issue 4, page 6 XTI interfaces
		_xti_accept = FUNCTION;
		_xti_alloc = FUNCTION;
		_xti_bind = FUNCTION;
		_xti_close = FUNCTION;
		_xti_connect = FUNCTION;
		_xti_error = FUNCTION;
		_xti_free = FUNCTION;
		_xti_getinfo = FUNCTION;
		_xti_getprotaddr = FUNCTION;
		_xti_getstate = FUNCTION;
		_xti_listen = FUNCTION;
		_xti_look = FUNCTION;
		_xti_open = FUNCTION;
		_xti_optmgmt = FUNCTION;
		_xti_rcv = FUNCTION;
		_xti_rcvconnect = FUNCTION;
		_xti_rcvdis = FUNCTION;
		_xti_rcvrel = FUNCTION;
		_xti_rcvudata = FUNCTION;
		_xti_rcvuderr = FUNCTION;
		_xti_snd = FUNCTION;
		_xti_snddis = FUNCTION;
		_xti_sndrel = FUNCTION;
		_xti_sndudata = FUNCTION;
		_xti_strerror = FUNCTION;
		_xti_sync = FUNCTION;
		_xti_unbind = FUNCTION;

		t_errno;				# defined in data.c
		__t_errno = FUNCTION;


#	IP Address Resolution: (X/Open CAE Specification (1994), page 6)
		endhostent = FUNCTION;
		getprotoent = FUNCTION;
		inet_addr = FUNCTION;
		ntohs = FUNCTION;
		endnetent = FUNCTION;
		gethostname = FUNCTION;
		getservbyname = FUNCTION;
		inet_lnaof = FUNCTION;
		sethostent = FUNCTION;
		endprotoent = FUNCTION;
		getnetbyaddr = FUNCTION;
		getservbyport = FUNCTION;
		inet_makeaddr = FUNCTION;
		setnetent = FUNCTION;
		endservent = FUNCTION;
		getnetbyname = FUNCTION;
		getservent = FUNCTION;
		inet_netof = FUNCTION;
		setprotoent = FUNCTION;
		gethostbyaddr = FUNCTION;
		getnetent = FUNCTION;
		h_errno;				# defined in data.c
		inet_network = FUNCTION;
		setservent = FUNCTION;
		gethostbyname = FUNCTION;
		getprotobyname = FUNCTION;
		htonl = FUNCTION;
		inet_ntoa = FUNCTION;
		gethostent = FUNCTION;
		getprotobynumber = FUNCTION;
		htons = FUNCTION;
		ntohl = FUNCTION;

	local:
		*;
};

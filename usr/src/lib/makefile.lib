#
#ident	"@(#)Makefile.lib	1.49	97/12/03 SMI"
#
# Copyright (c) 1995-1997, by Sun Microsystems, Inc.
# All rights reserved.
#
# lib/Makefile.lib
# Definitions common to libraries.
#
# include global definitions; SRC should be defined in the shell.
# SRC is needed until RFE 1026993 is implemented.
#
# Note that the building of profiled libraries is toggled under
# the $(BUILD_PROFS) flag which defaults to $(CH) in Makefile.master.

include		$(SRC)/Makefile.master

LORDER=		lorder
TSORT=		tsort
AWK=		awk
LN=		ln
CAT=		cat

MAPFILE-FLTR=	$(SRC)/lib/common/mapfile-filter

LIBS=		$(LIBRARY) $(LIBRARYCCC)
MACHLIBS=	$(LIBS:%=$(MACH)/%)
MACHLIBS64=	$(LIBS:%=$(MACH64)/%)
PLIB=
$(BUILD_PROFS)PLIB=	libp/$(LIBRARY)
DYNLIB=		$(LIBRARY:.a=.so$(VERS))
DYNLIBPSR=	$(LIBRARY:.a=_psr.so$(VERS))
DYNLIBCCC=	$(LIBRARYCCC:.a=.so$(VERS))
LIBLINKS=	$(LIBRARY:.a=.so)
LIBLINKSCCC=	$(LIBRARYCCC:.a=.so)
LIBNAME=	$(LIBRARY:lib%.a=%)
LIBLINKPATH=
LIBNULL=	null.a
MACHPLIB=	$(MACH)/$(PLIB)
MACHPLIB64=	$(MACH64)/$(PLIB)
ROOTLIBDIR=	$(ROOT)/usr/lib
ROOTLIBDIR64=	$(ROOT)/usr/lib/$(MACH64)
ROOTCCSLIBDIR=	$(ROOT)/usr/ccs/lib
ROOTCCSLIBDIR64=	$(ROOT)/usr/ccs/lib/$(MACH64)
ROOTLIBS=	$(LIBS:%=$(ROOTLIBDIR)/%)
ROOTLIBS64=	$(LIBS:%=$(ROOTLIBDIR64)/%)
ROOTLINKS=	$(ROOTLIBDIR)/$(LIBLINKS)
ROOTLINKS64=	$(ROOTLIBDIR64)/$(LIBLINKS)
ROOTLINKSCCC=	$(ROOTLIBDIR)/$(LIBLINKSCCC)
ROOTLINKSCCC64=	$(ROOTLIBDIR64)/$(LIBLINKSCCC)
ROOTPLIB=
ROOTPLIB64=
$(BUILD_PROFS)ROOTPLIB=	$(ROOTLIBDIR)/$(PLIB)
$(BUILD_PROFS)ROOTPLIB64= $(ROOTLIBDIR64)/$(PLIB)
LINTLIB=	llib-l$(LIBNAME).ln
LINTFLAGS=	-uax
LINTFLAGS64=	-uax
LINTOUT=	lint.out
ARFLAGS=	r
SONAME=		$(DYNLIB)
# For most libraries, we should be able to resolve all
# symbols at link time, either within the library or as dependencies.
# But some, such as libthread_db and the v9 libw/libntl, cannot, so
# ZDEFS and ZTEXT are tunable.
ZDEFS=		-z defs
ZTEXT=		-z text
DYNFLAGS=	-h $(SONAME) $(ZTEXT) $(ZDEFS)

LDLIBS=		$(LDLIBS.lib)

OBJS=		$(OBJECTS:%=objs/%)
PROFS=		$(OBJECTS:%=profs/%)
PICS=		$(OBJECTS:%=pics/%)

# Declare that all library .o's can all be made in parallel.
# The DUMMY target is for those instances where OBJS, PROFS and PICS
# are empty (to avoid an unconditional .PARALLEL declaration).
.PARALLEL:	$(OBJS) $(PROFS) $(PICS) DUMMY

# default value for "portable" source
SRCS=		$(OBJECTS:.o=.c)

# default build of an archive and a shared object,
# overridden locally when extra processing is needed
BUILD.AR=	$(AR) $(ARFLAGS) $@ $(AROBJS)
BUILD.SO=	$(CC) -o $@ -G $(DYNFLAGS) $(PICS) $(LDLIBS)
BUILDCCC.SO=	$(CCC) -o $@ -G $(DYNFLAGS) $(PICS) $(LDLIBS)

# default dynamic library symlink
INS.liblink=		-$(RM) $@; $(LN) $(ROOTLIBDIR)/$(LIBLINKS)$(VERS) $@
$(CH)INS.liblink=	-$(RM) $@; $(SYMLINK) $(LIBLINKPATH)$(LIBLINKS)$(VERS) $@
INS.liblinkccc=		-$(RM) $@; $(LN) $(ROOTLIBDIR)/$(LIBLINKSCCC)$(VERS) $@
$(CH)INS.liblinkccc=	-$(RM) $@; $(SYMLINK) $(LIBLINKPATH)$(LIBLINKSCCC)$(VERS) $@

# default 64-bit dynamic library symlink
INS.liblink64=		-$(RM) $@; $(LN) $(ROOTLIBDIR64)/$(LIBLINKS)$(VERS) $@
$(CH)INS.liblink64=	-$(RM) $@; $(SYMLINK) $(LIBLINKPATH)$(LIBLINKS)$(VERS) $@
INS.liblinkccc64=	-$(RM) $@; $(LN) $(ROOTLIBDIR64)/$(LIBLINKSCCC)$(VERS) $@
$(CH)INS.liblinkccc64=	-$(RM) $@; $(SYMLINK) $(LIBLINKPATH)$(LIBLINKSCCC)$(VERS) $@

# conditional assignments

$(OBJS)  :=	sparc_CFLAGS += -xregs=no%appl
$(PROFS) :=	sparc_CFLAGS += -xregs=no%appl
$(PROFS) :=	CFLAGS += -p

$(PICS)  :=	sparc_CFLAGS += -xregs=no%appl -K pic
$(PICS)  :=	i386_CFLAGS += -K pic
$(PICS)  :=	sparcv9_CFLAGS += -xregs=no%appl -K PIC
# should be -K pic but the CC driver is currently broken
$(PICS)  :=	CCFLAGS += -pic
$(PICS)  :=	CPPFLAGS += -DPIC -D_TS_ERRNO
$(PICS)  :=	sparcv9_CCFLAGS += -xregs=no%appl -KPIC

$(LINTLIB):=	LOG = -DLOGGING
$(LIBRARY):=	AROBJS = $(OBJS)
$(BUILD_PROFS)$(PLIB):=	AROBJS = $(PROFS)
$(LIBRARY):=	DIR = objs
$(BUILD_PROFS)$(PLIB):=	DIR = profs
$(DYNLIB):=	DIR = pics
$(DYNLIBCCC):=	DIR = pics

SONAMECCC= $(DYNLIBCCC)
$(DYNLIBCCC):= DYNFLAGS = -h $(SONAMECCC) -z text -z defs -norunpath -nolib

# build rule for "portable" source
objs/%.o profs/%.o pics/%.o: %.c
	$(COMPILE.c) -o $@ $<
	$(POST_PROCESS_O)

objs/%.o profs/%.o pics/%.o: %.cc
	$(COMPILE.cc) -o $@ $<
	$(POST_PROCESS_O)

.PRECIOUS: $(LIBS) $(PLIB)

# Define the majority text domain in this directory.
TEXT_DOMAIN= SUNW_OST_OSLIB
